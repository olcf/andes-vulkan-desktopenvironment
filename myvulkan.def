Bootstrap: docker
From: nvidia/cuda:11.2.2-cudnn8-devel-ubuntu20.04

#Bootstrap: localimage
#From: cuda_11.2.2-cudnn8-devel-ubuntu20.04.sif


%environment
export DEBIAN_FRONTEND=noninteractive 
export DISPLAY=:1 
export LANG=C.UTF-8 
export XDG_CONFIG_DIRS=/etc/xdg 
export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json 
export VK_LAYER_PATH=/usr/share/vulkan/explicit_layer.d
export LIBRARY_PATH=/usr/lib/x86_64-linux-gnu
export DBUS_SESSION_BUS_ADDRESS=""

%files
./entrypoint.sh /opt/entrypoint.sh

%post
set -ex
export DEBIAN_FRONTEND=noninteractive 
export DISPLAY=:1 
export LANG=C.UTF-8 
export XDG_CONFIG_DIRS=/etc/xdg 
export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json 
export VK_LAYER_PATH=/usr/share/vulkan/explicit_layer.d
export LIBRARY_PATH=/usr/lib/x86_64-linux-gnu
export DBUS_SESSION_BUS_ADDRESS=""

echo 'Acquire::AllowInsecureRepositories "true";' > /etc/apt/apt.conf.d/99insecure \
  && echo 'Acquire::AllowDowngradeToInsecureRepositories "true";' >> \
  /etc/apt/apt.conf.d/99insecure

# Install desktop and Vulkan libraries
apt-get update && apt-get install -y \
  sudo curl wget git vim nano unzip \
  xfce4 xfce4-goodies x11vnc dbus-x11 thunar \
  vulkan-tools vulkan-validationlayers libvulkan1 \
  mesa-vulkan-drivers libglfw3-dev  libgl1-mesa-glx
apt-get install -y --install-recommends xfce4 xfce4-goodies xfce4-terminal gdm3- lightdm-
apt-get install -y firefox xterm tilix gtkwave evince nomacs tkcvs 
apt-get install -y tigervnc-standalone-server tigervnc-xorg-extension tigervnc-viewer vinagre xvfb

wget https://download.nvidia.com/XFree86/Linux-x86_64/470.182.03/NVIDIA-Linux-x86_64-470.182.03.run
chmod +x NVIDIA-Linux-x86_64-470.182.03.run

# the issue https://github.com/NVIDIA/nvidia-container-toolkit/issues/16#issuecomment-2471325058 suggested running NVIDIA*.run with --silent --no-kernel-module, 
# but I think that really only works if you are using Docker with nvidia-container-toolkit as your runtime. The below works better for Apptainer on Andes.

./NVIDIA-Linux-x86_64-470.182.03.run -x # extracts files from driver installer
cd NVIDIA-Linux-x86_64-470.182.03/
mkdir -p /usr/share/vulkan/explicit_layer.d /usr/share/vulkan/icd.d /usr/share/vulkan/implicit_layer.d /usr/share/glvnd/egl_vendor.d/ /usr/share/egl/egl_external_platform.d
cp nvidia_layers.json /usr/share/vulkan/implicit_layer.d
cp nvidia_icd.json /usr/share/vulkan/icd.d
cp 10_nvidia.json  /usr/share/glvnd/egl_vendor.d
cp 10_nvidia_wayland.json /usr/share/egl/egl_external_platform.d
install -d /etc/OpenCL/vendors && echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd 

rm -rf ./NVIDIA-Linux-x86_64-470.182.03.run NVIDIA-Linux-x86_64-470.182.03/


# install cmake
cd /opt
wget https://github.com/Kitware/CMake/releases/download/v3.31.8/cmake-3.31.8-linux-x86_64.sh
chmod +x ./cmake-3.31.8-linux-x86_64.sh
./cmake-3.31.8-linux-x86_64.sh --skip-license


# other stuff. Probably some repetition here
apt-get update && apt-get install -y \
  vulkan-tools vulkan-validationlayers vulkan-utils \
  libvulkan1 mesa-vulkan-drivers 

apt-get update && apt-get install -y libvncserver1
apt-get install -y libxau6 libxdmcp6 libxcb1 libxext6 libx11-6
apt-get install -y libglvnd0 libgl1 libglx0 libegl1 libgles2 mesa-utils
apt-get install -y ocl-icd-libopencl1 clinfo
apt-get install -y libx11-xcb1 libxkbcommon-x11-0 libxrandr2 libegl1 libvulkan1 vulkan-tools


cd /opt && git clone https://github.com/NVIDIA/cuda-samples

cd /opt/cuda-samples/Samples/5_Domain_Specific/simpleVulkan
sed -i "11s/.*/set(CMAKE_CUDA_ARCHITECTURES 37)/" CMakeLists.txt
mkdir build && cd build
/opt/bin/cmake .. && make

chmod +x /opt/entrypoint.sh
